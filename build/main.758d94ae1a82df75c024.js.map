{"version":3,"sources":["webpack:///./js/countDownTimer.js","webpack:///./index.js"],"names":["CountdownTimer","constructor","selector","targetDate","onTick","this","updateTime","timerID","setInterval","deltaTime","getTime","Date","now","clearInterval","console","log","time","days","getDays","hours","getHours","minutes","getMinutes","seconds","getSeconds","Math","floor","pad","value","String","padStart","refs","day","document","querySelector","hour","minute","second","textContent"],"mappings":"mIA0DeA,MA1Df,MACEC,aAAY,SAAEC,EAAF,WAAYC,EAAZ,OAAwBC,IAClCC,KAAKH,SAAWA,EAChBG,KAAKF,WAAaA,EAClBE,KAAKD,OAASA,EACdC,KAAKC,aAGPA,aACE,MAAMC,EAAUC,YAAY,KAC1B,MAEMC,EAFaJ,KAAKF,WAAWO,UACfC,KAAKC,MAEzB,GAAIH,GAAa,EAEf,OADAI,cAAcN,GACPO,QAAQC,IAAI,kBAErB,MAAMC,EAAO,CACXC,KAAMZ,KAAKa,QAAQT,GACnBU,MAAOd,KAAKe,SAASX,GACrBY,QAAShB,KAAKiB,WAAWb,GACzBc,QAASlB,KAAKmB,WAAWf,IAE3BJ,KAAKD,OAAOY,IACX,KAGLE,QAAQF,GAGN,OAFaS,KAAKC,MAAMV,EAAO,OAKjCI,SAASJ,GAKP,OAJcX,KAAKsB,IACjBF,KAAKC,MAAOV,EAAO,MAAR,OAMfM,WAAWN,GAIT,OAHgBX,KAAKsB,IACnBF,KAAKC,MAAOV,EAAO,KAAR,MAKfQ,WAAWR,GAET,OADgBX,KAAKsB,IAAIF,KAAKC,MAAOV,EAAO,IAAe,MAI7DW,IAAIC,GACF,OAAOC,OAAOD,GAAOE,SAAS,EAAG,OClDrC,MAAMC,EAAO,CACXC,IAAKC,SAASC,cAAe,uBAC7BC,KAAMF,SAASC,cAAe,wBAC9BE,OAAQH,SAASC,cAAe,uBAChCG,OAAQJ,SAASC,cAAe,wBAGb,IAAIlC,EAAe,CACtCE,SAAU,WACVC,WAAY,IAAIQ,KAAK,gBACrBP,OAGF,UAAyB,KAAEa,EAAF,MAAQE,EAAR,QAAeE,EAAf,QAAwBE,IAC/CQ,EAAKC,IAAIM,YAAcrB,EACvBc,EAAKI,KAAKG,YAAcnB,EACxBY,EAAKK,OAAOE,YAAcjB,EAC1BU,EAAKM,OAAOC,YAAcf,O","file":"main.758d94ae1a82df75c024.js","sourcesContent":["class CountdownTimer {\n  constructor({ selector, targetDate, onTick }) {\n    this.selector = selector;\n    this.targetDate = targetDate;\n    this.onTick = onTick;\n    this.updateTime();\n  }\n\n  updateTime() {\n    const timerID = setInterval(() => {\n      const targetTime = this.targetDate.getTime();\n      const currentTime = Date.now();\n      const deltaTime = targetTime - currentTime;\n      if (deltaTime <= 0) {\n        clearInterval(timerID);\n        return console.log(\"Get a party!!!\");\n      }\n      const time = {\n        days: this.getDays(deltaTime),\n        hours: this.getHours(deltaTime),\n        minutes: this.getMinutes(deltaTime),\n        seconds: this.getSeconds(deltaTime)\n      };\n      this.onTick(time);\n    }, 1000);\n  }\n\n  getDays(time) {\n    const days = Math.floor(time / (1000 * 60 * 60 * 24));\n\n    return days;\n  }\n\n  getHours(time) {\n    const hours = this.pad(\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n    );\n\n    return hours;\n  }\n\n  getMinutes(time) {\n    const minutes = this.pad(\n      Math.floor((time % (1000 * 60 * 60)) / (1000 * 60))\n    );\n    return minutes;\n  }\n\n  getSeconds(time) {\n    const seconds = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n    return seconds;\n  }\n\n  pad(value) {\n    return String(value).padStart(2, \"0\");\n  }\n}\n\nexport default CountdownTimer;\n","import \"./styles.css\";\n\nimport CountdownTimer from \"./js/countDownTimer.js\";\n\nconst refs = {\n  day: document.querySelector(`[data-value=\"days\"]`),\n  hour: document.querySelector(`[data-value=\"hours\"]`),\n  minute: document.querySelector(`[data-value=\"mins\"]`),\n  second: document.querySelector(`[data-value=\"secs\"]`)\n};\n\nconst upToBirthday = new CountdownTimer({\n  selector: \"#timer-1\",\n  targetDate: new Date(\"May 25, 2021\"),\n  onTick: updateClockFace\n});\n\nfunction updateClockFace({ days, hours, minutes, seconds }) {\n  refs.day.textContent = days;\n  refs.hour.textContent = hours;\n  refs.minute.textContent = minutes;\n  refs.second.textContent = seconds;\n}\n"],"sourceRoot":""}